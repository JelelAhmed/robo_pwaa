{"version":3,"sources":["actions.js","api/api.js","constants.js","Components/CounterButton.js","Components/Header.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","CounterButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","console","log","setState","state","count","nextProps","nextState","react_default","a","createElement","color","onClick","React","PureComponent","Header","Components_CounterButton","Component","Card","_ref","name","email","id","className","alt","src","concat","CardList","robots","map","user","i","Components_Card","key","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","hasError","info","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Components_Header","Components_SearchBox","Components_Scroll","ErrorBoundry","Components_CardList","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b8631143.chunk.js","sourcesContent":["import { apiCall } from './api/api'\r\nimport {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nclass CounterButton extends React.PureComponent {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\tif (this.state.count !== nextState.count) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tupdateCount = () => {\r\n\t\tconsole.log('clicked')\r\n\t\tthis.setState(state => { \r\n\t\t\treturn {count: state.count + 1}\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('Counter Rendered')\r\n\t\treturn (\r\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\r\n\t\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t)\r\n\t}\r\n\t\r\n}\r\n\r\nexport default CounterButton;","import React from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends React.Component {\r\n\r\n\t// shouldComponentUpdate(nextProps, nextState) {\r\n\t// \treturn true;\r\n\t// }\r\n\r\n\trender() {\r\n\t\tconsole.log('Header')\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t<CounterButton color={\"red\"}/>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t);\r\n\t}\r\n\t\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport Header from '../Components/Header';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n\r\nimport './App.css';\r\n\r\n// parameter state comes from index.js provider store state(rootReducers)\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending\r\n  }\r\n}\r\n\r\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\r\n// the function returns an object then uses connect to change the data from redecers.\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField, onSearchChange, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return (\r\n      <div className='tc'>\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          { isPending ? <h1>Loading</h1> :\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          }\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// action done from mapDispatchToProps will channge state from mapStateToProps\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport 'tachyons';\r\n\r\nimport App from './Containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { requestRobots, searchRobots } from './reducers'\r\n\r\nimport './index.css';\r\n\r\nconst logger = createLogger() \r\n\r\nconst rootReducers = combineReducers({requestRobots, searchRobots})\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}